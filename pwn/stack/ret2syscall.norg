* ret2syscall

  ret2syscall refers to a collection of exploits that are similar to ret2libc, but do not take advantage of libc.
  Rather, all gadgets used in the ropchain come from the binary. This is especially useful for static build binaries,
  where all functions are contained in the executable, and no external libraries are dynamically loaded.

** Key concepts

   ret2syscall depends on the binary having the `syscall` gadget. This gadget basically calls a function from the OS. From Wikipedia: 

   > ... syscall is the programmatic way in which a computer program requests a service from the kernel of the operating system on which it is executed.

   `syscall` reads an integer from `$rax`. This integer specifies which service the program would like to call.

*** 64-bit

    @table
    | ID ($rax) 	| Service or function 			|
    | ------------- | ----------------------------- |
    | 0 			| read(fd, buf, count) 			|
    | 1				| write(fd, buf, count) 		|
    | 2 			| open(path, flags)				|
    | 59 			| **execve(path, args, env)**	|
    @end

    The complete list of syscalls for x64 bit can be found here: <https://filippo.io/linux-syscall-table/>

    Parameters can also be passed into syscall in these registers, in sequence: 

    `$rdi`, `$rsi`, `$rdx`, `$r10`, `$r8`, `$r9`

    `execve` takes in 3 parameters: `execve(pathname, arguments, env\_vars)`. 

    The pathname we want is, of course, `/bin/sh`.

    `ROPgadget --binary ./hackme --string '/bin/sh'`

    If not found, we have 3 options: 

**** Call gets(elf.bss()) and enter in /bin/sh, then set $rdi to elf.bss() 

     This can be automated easily using pwntools. 

     @code python
     rop.raw(b'A'*offset)
     rop.gets(elf.bss())
     rop.execve(elf.bss(), 0, 0)
     log.info(rop.dump())
     p.sendline(rop.chain())
     @end

**** Use registers to put a /bin/sh at elf.bss(), then set $rdi to elf.bss()

     We cannot do this just by popping `/bin/sh` into `$rdi`, as `execve` will grab the string from the address that
     `$rdi` *points* to, not the value of `$rdi` itself.

     Instead, we need to utilize gadgets such as `mov qword ptr [rax], rdx`, which will copy the contents of `$rdx` into
     the address pointed at by `$rax`. We can easily control this by manipulating gadgets. 

**** Manually piece together the string `/bin/sh` char by char.

     TODO: find a writeup explaining this

     ---

    When popping a shell, we definitely won't need any arguments or env vars. Since these arguments need to be arrays, if
    we were to put a value other than NULL, we'd have to manually construct our own arrays, which is very cumbersome.
    Thus, we can just set them to NULL to avoid any errors.

    This portion is quite similar to one_gadgets. The registers of interest may not necessarily be NULL or 0, so we need
    to string some gadgets together to control them. 

    After all registers have been settled, we can go ahead and call a gadget with `syscall`. This gadget doesn't need to
    have a `ret` instruction, as the syscall will be our last last gadget in the ropchain.

    Besides `/bin/sh`, we can also make calls to open/read/write to open the flag file and read it. (ref.
    DU20/return-to-what-revenge). The general idea is to find a syscall gadget with a ret so that we can chain
    multiple syscalls. This can be done with `ROPgadget --multibr` which allows mutli-branching gadgets.

*** 32-bit

    In 32-bit, the gadget that allows syscall is actually `int 0x80`.

    @table
    | ID ($eax) 	| Service 			  |
    | ------------- | ------------------- |
    | 11 			| execve			  |
    @end

    Arguments are passed via `$ebx, $ecx and $edx`.

    For the rest, follow above :)
